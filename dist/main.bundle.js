(()=>{"use strict";function e(e){this.value=e,this.left=null,this.right=null}function t(e,r=[]){return e?(console.log("current node value is",e.value),r.push(e.value),r=t(e.left,r),r=t(e.right,r)):r}function r(e,t=[]){return e?(t=r(e.left,t),console.log("node value is",e.value),t.push(e.value),t=r(e.right,t)):t}function n(e,t=[]){return e?(t=n(e.left,t),t=n(e.right,t),console.log("node value is",e.value),t.push(e.value),t):t}function l(e,t){return!!e&&(e.value===t||(t<e.value?l(e.left,t):l(e.right,t)))}function o(e){if(!e)return 0;const t=o(e.left),r=o(e.right);return Math.max(t,r)+1}!function(){const u=function(){let t=new e(10);return t.left=new e(20),t.right=new e(30),t.left.left=new e(40),t.left.right=new e(50),t.right.left=new e(60),t.right.right=new e(70),t.left.left.right=new e(80),t}();let i=o(u);console.error("treeHeight is",i);let s=r(u);console.error("retValInOrder is",s);let f=t(u);console.error("retValPreOrder is",f);let h=n(u);console.error("retValPostOrder is",h);let c=function(e,t=[]){if(!e)return;const r=[e];for(;r.length>0;){const e=r.shift();console.log("node value is",e.value),t.push(e.value),e.left&&r.push(e.left),e.right&&r.push(e.right)}return t}(u);console.error("retValBfs is",c);let a=l(u,30);console.error("30 was "+(a?"found":"not found")+" in the tree");let g=l(u,200);console.error("200 was "+(g?"found":"not found")+" in the tree")}()})();